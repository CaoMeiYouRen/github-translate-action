{"version":3,"sources":["../src/main.ts","../src/utils/createIssueComment.ts","../src/utils/createDiscussionComment.ts","../src/utils/isTargetLanguage.ts","../src/utils/translate.ts","../src/utils/updateIssue.ts","../src/utils/updateDiscussion.ts","../src/modes/index.ts","../src/modes/issues.ts","../src/modes/discussion.ts","../src/modes/issue_comment.ts","../src/modes/discussion_comment.ts","../src/modes/pull_request.ts","../src/modes/pull_request_review_comment.ts"],"sourcesContent":["import * as core from '@actions/core'\nimport * as github from '@actions/github'\nimport {createIssueComment, updateIssue, translate} from './utils'\nimport getModel from './modes'\nimport {translateText} from './utils/translate'\n\nconst TRANSLATE_TITLE_DIVING = ` || `\nconst TRANSLATE_DIVIDING_LINE = `<!--This is a translation content dividing line, the content below is generated by machine, please do not modify the content below-->`\nconst DEFAULT_BOT_MESSAGE = `Bot detected the issue body's language is not English, translate it automatically. üëØüë≠üèªüßë‚Äçü§ù‚Äçüßëüë´üßëüèø‚Äçü§ù‚Äçüßëüèªüë©üèæ‚Äçü§ù‚Äçüë®üèøüë¨üèø`\nconst DEFAULT_BOT_TOKEN = process.env.GITHUB_TOKEN\n\nasync function main(): Promise<void> {\n  // core.info(JSON.stringify(github.context))\n\n  const isModifyTitle = core.getInput('IS_MODIFY_TITLE')\n  const shouldAppendContent = core.getInput('APPEND_TRANSLATION')\n  const botNote =\n    core.getInput('CUSTOM_BOT_NOTE')?.trim() || DEFAULT_BOT_MESSAGE\n  const targetLanguage = core.getInput('TARGET_LANGUAGE') || 'eng'\n  // ignore when bot comment issue himself\n  const botToken = DEFAULT_BOT_TOKEN\n  if (!botToken) {\n    return core.info(`GITHUB_TOKEN is requried!`)\n  }\n\n  const model = getModel()\n  if (!model) {\n    return\n  }\n\n  const {match, title, body, update} = model\n  if (!match) {\n    return\n  }\n\n  const octokit = github.getOctokit(botToken)\n  const originTitle = title?.split(TRANSLATE_TITLE_DIVING)?.[0]\n  const originComment = body?.split(TRANSLATE_DIVIDING_LINE)?.[0]\n\n  const translateOrigin = translateText.stringify(\n    originComment,\n    originTitle,\n    targetLanguage\n  )\n  if (!translateOrigin) {\n    return\n  }\n  core.info(`translate origin body is: ${translateOrigin}`)\n\n  // translate issue comment body to english\n  const translateTmp = await translate(translateOrigin, targetLanguage)\n  if (!translateTmp || translateTmp === translateOrigin) {\n    return core.warning('The translateBody is null or same, ignore return.')\n  }\n\n  core.info(`translate body is: ${translateTmp}`)\n\n  let [translateComment, translateTitle] = translateText.parse(translateTmp)\n\n  if (shouldAppendContent) {\n    const title =\n      translateTitle &&\n      originTitle !== translateTitle &&\n      [originTitle, translateTitle].join(TRANSLATE_TITLE_DIVING)\n    const body =\n      translateComment &&\n      originComment !== translateComment &&\n      `${originComment}\n${TRANSLATE_DIVIDING_LINE}\n---\n${translateComment}\n`\n    await update(octokit, body || undefined, title || undefined)\n  } else {\n    const needCommitComment =\n      translateComment && translateComment !== originComment\n    const {\n      context: {\n        payload: {issue, discussion, pull_request}\n      }\n    } = github\n    translateComment = `\n> ${botNote}\n----\n${\n  isModifyTitle === 'false' && needCommitComment\n    ? `**Title:** ${translateTitle}`\n    : ''\n}\n\n${translateComment}`\n    if (\n      isModifyTitle === 'true' &&\n      translateTitle &&\n      translateTitle !== originTitle\n    ) {\n      await update(octokit, undefined, translateTitle)\n    }\n\n    if (translateComment && translateComment !== originComment) {\n      await createIssueComment({\n        pull_number: pull_request?.number,\n        discussion_number: discussion?.node_id,\n        issue_number: issue?.number,\n        body: translateComment,\n        octokit\n      })\n    }\n  }\n\n  core.setOutput('complete time', new Date().toTimeString())\n}\n\nasync function run() {\n  try {\n    await main()\n  } catch (err: any) {\n    core.setFailed(err.message)\n  }\n}\n\nrun()\n","import * as core from '@actions/core'\nimport * as github from '@actions/github'\nimport {createDiscussionComment} from './createDiscussionComment'\n\ninterface CreateIssueCommentParameters {\n  pull_number?: number\n  discussion_number?: number\n  issue_number?: number\n  body: string\n  octokit: ReturnType<typeof github.getOctokit>\n}\n\nexport async function createIssueComment({\n  pull_number,\n  discussion_number,\n  issue_number,\n  body,\n  octokit\n}: CreateIssueCommentParameters): Promise<void> {\n  const {owner, repo} = github.context.repo\n  if (discussion_number) {\n    return createDiscussionComment({\n      discussion_number,\n      body,\n      octokit\n    })\n  }\n\n  const number = issue_number || pull_number\n  if (!number) {\n    return\n  }\n  await octokit.rest.issues.createComment({\n    owner,\n    repo,\n    issue_number: number,\n    body\n  })\n\n  const url = github.context.payload?.issue?.html_url\n  core.info(`complete to push translate issue comment: ${body} in ${url} `)\n}\n","import * as core from '@actions/core'\nimport * as github from '@actions/github'\n\ninterface UpdateDiscussionParams {\n  discussion_number: number\n  body?: string\n  octokit: ReturnType<typeof github.getOctokit>\n}\n\nexport async function createDiscussionComment({\n  discussion_number: discussionId,\n  body,\n  octokit\n}: UpdateDiscussionParams) {\n  const mutation = `mutation($discussionId: ID!, $body: String) {\n    addDiscussionComment(input: {discussionId: $discussionId, body: $body}) {\n      comment {\n        body\n      }\n    }\n  }`\n\n  await octokit.graphql({\n    query: mutation,\n    discussionId,\n    body\n  })\n\n  const url = github.context.payload?.discussion?.html_url\n  core.info(`complete to push translate discussion comment: ${body} in ${url} `)\n}\n","import * as core from '@actions/core'\nimport franc from 'franc-min'\n\nexport function isTargetLanguage(\n  body: string | null,\n  language = 'eng'\n): boolean | true {\n  if (body === null) {\n    return true\n  }\n  const detectResult = franc(body)\n  if (\n    detectResult === 'und' ||\n    detectResult === undefined ||\n    detectResult === null\n  ) {\n    core.warning(`Can not detect the undetermined comment body: ${body}`)\n    return false\n  }\n  core.info(`Detect comment body language result is: ${detectResult}`)\n  return detectResult === language\n}\n","import * as core from '@actions/core'\nimport GoogleTranslate from '@tomsun28/google-translate-api'\nimport {isTargetLanguage} from './isTargetLanguage'\nimport langs from 'langs'\n\n/**\n *\n * @param text\n * @param language ISO 639-3 Language Code\n * @returns\n */\nexport async function translate(\n  text: string,\n  language = 'eng'\n): Promise<string | undefined> {\n  try {\n    const to = langs.where('3', language)?.['1']\n    const resp = await GoogleTranslate(text, {to: to})\n    return resp.text !== text ? resp.text : ''\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } catch (err: any) {\n    core.error(err)\n    core.setFailed(err.message)\n  }\n}\n\nconst MAGIC_JOIN_STRING = '@@===='\nexport const translateText = {\n  parse(text?: string) {\n    if (!text) {\n      return [undefined, undefined]\n    }\n\n    const translateBody: string[] = text.split(MAGIC_JOIN_STRING)\n    return [translateBody?.[0]?.trim(), translateBody[1].trim()]\n  },\n  stringify(body?: string, title?: string, language = 'eng') {\n    let needCommitComment =\n      body && body !== 'null' && !isTargetLanguage(body, language)\n    let needCommitTitle =\n      title && title !== 'null' && !isTargetLanguage(title, language)\n\n    let translateOrigin = null\n\n    if (!needCommitComment) {\n      core.info('Detect the issue comment body is english already, ignore.')\n    }\n    if (!needCommitTitle) {\n      core.info('Detect the issue title body is english already, ignore.')\n    }\n    if (!needCommitTitle && !needCommitComment) {\n      core.info('Detect the issue do not need translated, return.')\n      return translateOrigin\n    }\n\n    return [body || 'null', title].join(MAGIC_JOIN_STRING)\n  }\n}\n","import * as core from '@actions/core'\nimport * as github from '@actions/github'\nimport {updateDiscussion} from './updateDiscussion'\n\ninterface UpdateIssueParameters {\n  discussion_number?: number\n  issue_number?: number\n  comment_id?: number\n  title?: string\n  body?: string\n  octokit: ReturnType<typeof github.getOctokit>\n}\n\nexport async function updateIssue({\n  discussion_number,\n  issue_number,\n  comment_id,\n  title,\n  body,\n  octokit\n}: UpdateIssueParameters): Promise<void> {\n  if (discussion_number) {\n    return updateDiscussion({\n      discussion_number,\n      comment_id,\n      title,\n      body,\n      octokit\n    })\n  }\n\n  const {owner, repo} = github.context.repo\n\n  if (issue_number) {\n    if (comment_id && body) {\n      await octokit.rest.issues.updateComment({owner, repo, comment_id, body})\n    } else if (title || body) {\n      await octokit.rest.issues.update({owner, repo, issue_number, title, body})\n    }\n  }\n\n  const url = github.context.payload.issue?.html_url\n  if (title) {\n    core.info(`complete to modify translate issue title: ${title} in ${url} `)\n  }\n\n  if (body) {\n    core.info(`complete to modify translate issue body: ${body} in ${url} `)\n  }\n}\n","import * as core from '@actions/core'\nimport * as github from '@actions/github'\n\ninterface UpdateDiscussionParams {\n  discussion_number?: number\n  comment_id?: number\n  body?: string\n  title?: string\n  octokit: ReturnType<typeof github.getOctokit>\n}\n\nexport async function updateDiscussion({\n  discussion_number: discussionId,\n  comment_id: commentId,\n  body,\n  title,\n  octokit\n}: UpdateDiscussionParams) {\n  const mutation = commentId\n    ? `mutation($commentId: ID!, $body: String!) {\n    updateDiscussionComment(input: {commentId: $commentId, body: $body}) {\n      comment {\n        body\n      }\n    }\n  }`\n    : `mutation($discussionId: ID!, $body: String, $title: String, ) {\n    updateDiscussion(input: {discussionId: $discussionId, title: $title, body: $body}) {\n      discussion {\n        title\n        body\n      }\n    }\n  }`\n\n  await octokit.graphql({\n    query: mutation,\n    discussionId,\n    commentId,\n    body,\n    title\n  })\n\n  const url = github.context.payload?.discussion?.html_url\n  if (title) {\n    core.info(\n      `complete to modify translate discussion title: ${title} in ${url} `\n    )\n  }\n\n  if (body) {\n    core.info(\n      `complete to modify translate discussion body: ${body} in ${url} `\n    )\n  }\n}\n","import * as github from '@actions/github'\n\nimport issues from './issues'\nimport discussion from './discussion'\nimport issue_comment from './issue_comment'\nimport discussion_comment from './discussion_comment'\nimport pull_request from './pull_request'\nimport pull_request_target from './pull_request'\nimport pull_request_review_comment from './pull_request_review_comment'\n\nexport const models = {\n  issues,\n  issue_comment,\n\n  discussion,\n  discussion_comment,\n\n  pull_request,\n  pull_request_target,\n  pull_request_review_comment\n}\n\nexport type TRANSLATE_EVENT_NAME = keyof typeof models\nexport interface TRANSLATE_MODEL {\n  readonly match: boolean\n  readonly title?: string\n  readonly body?: string\n  update: (\n    octokit: ReturnType<typeof github.getOctokit>,\n    body?: string | null,\n    title?: string | null\n  ) => Promise<any>\n}\nexport default function getModel(): TRANSLATE_MODEL | undefined {\n  return models[github.context.eventName as TRANSLATE_EVENT_NAME]\n}\n","import * as github from '@actions/github'\nimport {updateIssue} from '../utils'\n\nexport default {\n  get match() {\n    const {\n      context: {\n        payload: {issue}\n      }\n    } = github\n    return Boolean(issue?.number)\n  },\n  get title() {\n    return github.context.payload.issue?.title\n  },\n  get body() {\n    return github.context.payload.issue?.body\n  },\n  async update(\n    octokit: ReturnType<typeof github.getOctokit>,\n    body?: string | null,\n    title?: string | null\n  ): Promise<void> {\n    const {\n      context: {\n        payload: {issue}\n      }\n    } = github\n    return updateIssue({\n      issue_number: issue?.number,\n      title: title && title !== 'null' ? title : undefined,\n      body: body && body !== 'null' ? body : undefined,\n      octokit\n    })\n  }\n}\n","import * as github from '@actions/github'\nimport {updateIssue} from '../utils'\n\nexport default {\n  get match() {\n    const {\n      context: {\n        payload: {discussion}\n      }\n    } = github\n    return Boolean(discussion?.number)\n  },\n  get title() {\n    return github.context.payload.discussion?.title\n  },\n  get body() {\n    return github.context.payload.discussion?.body\n  },\n  async update(\n    octokit: ReturnType<typeof github.getOctokit>,\n    body?: string | null,\n    title?: string | null\n  ) {\n    const {\n      context: {\n        payload: {discussion}\n      }\n    } = github\n    return updateIssue({\n      discussion_number: discussion.node_id,\n      title: title && title !== 'null' ? title : undefined,\n      body: body && body !== 'null' ? body : undefined,\n      octokit\n    })\n  }\n}\n","import * as github from '@actions/github'\nimport {updateIssue} from '../utils'\n\nexport default {\n  get match() {\n    const {\n      context: {\n        payload: {issue}\n      }\n    } = github\n    return Boolean(issue?.number)\n  },\n  get title() {\n    return undefined\n  },\n  get body() {\n    return github.context.payload.comment?.body\n  },\n  async update(\n    octokit: ReturnType<typeof github.getOctokit>,\n    body?: string | null\n  ): Promise<void> {\n    const {\n      context: {\n        payload: {issue, comment}\n      }\n    } = github\n    return updateIssue({\n      issue_number: issue?.number,\n      comment_id: comment?.id,\n      body: body && body !== 'null' ? body : undefined,\n      octokit\n    })\n  }\n}\n","import * as github from '@actions/github'\nimport {updateIssue} from '../utils'\n\nexport default {\n  get match() {\n    const {\n      context: {\n        payload: {discussion}\n      }\n    } = github\n    return Boolean(discussion?.number)\n  },\n  get title() {\n    return undefined\n  },\n  get body() {\n    return github.context.payload.comment?.body\n  },\n  async update(\n    octokit: ReturnType<typeof github.getOctokit>,\n    body?: string | null,\n    title?: string | null\n  ) {\n    const {\n      context: {\n        payload: {discussion, comment}\n      }\n    } = github\n    return updateIssue({\n      discussion_number: discussion.node_id,\n      comment_id: comment?.node_id,\n      title: title && title !== 'null' ? title : undefined,\n      body: body && body !== 'null' ? body : undefined,\n      octokit\n    })\n  }\n}\n","import * as core from '@actions/core'\nimport * as github from '@actions/github'\n\nexport default {\n  get match() {\n    const {\n      context: {\n        payload: {pull_request}\n      }\n    } = github\n    return Boolean(pull_request?.number)\n  },\n  get title() {\n    return github.context.payload.pull_request?.title\n  },\n  get body() {\n    return github.context.payload.pull_request?.body\n  },\n  async update(\n    octokit: ReturnType<typeof github.getOctokit>,\n    body?: string | null,\n    title?: string | null\n  ): Promise<void> {\n    const {\n      context: {\n        repo: {owner, repo},\n        payload: {pull_request}\n      }\n    } = github\n\n    if (!pull_request?.number) {\n      return\n    }\n    await octokit.rest.pulls.update({\n      owner,\n      repo,\n      pull_number: pull_request?.number,\n      title: title && title !== 'null' ? title : undefined,\n      body: body && body !== 'null' ? body : undefined\n    })\n\n    const url = github.context.payload.pull_request?.html_url\n    if (title) {\n      core.info(\n        `complete to modify translate pull_request title: ${title} in ${url} `\n      )\n    }\n\n    if (body) {\n      core.info(\n        `complete to modify translate pull_request body: ${body} in ${url} `\n      )\n    }\n  }\n}\n","import * as core from '@actions/core'\nimport * as github from '@actions/github'\n\nexport default {\n  get match() {\n    const {\n      context: {\n        payload: {pull_request}\n      }\n    } = github\n    return Boolean(pull_request?.number)\n  },\n  get title() {\n    return undefined\n  },\n  get body() {\n    return github.context.payload.comment?.body\n  },\n  async update(\n    octokit: ReturnType<typeof github.getOctokit>,\n    body?: string | null\n  ): Promise<void> {\n    const {\n      context: {\n        repo: {owner, repo},\n        payload: {pull_request, comment}\n      }\n    } = github\n\n    if (\n      !pull_request?.number ||\n      !comment ||\n      !comment?.id ||\n      !body ||\n      body === 'null'\n    ) {\n      return\n    }\n\n    await octokit.rest.pulls.updateReviewComment({\n      owner,\n      repo,\n      comment_id: comment.id,\n      body\n    })\n\n    const url = github.context.payload.pull_request?.html_url\n    if (body) {\n      core.info(\n        `complete to modify translate pull_request body: ${body} in ${url} `\n      )\n    }\n  }\n}\n"],"mappings":"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","names":["core","github","core","github","core","franc","core","langs","GoogleTranslate","core","github","core","github","github","github","github","github","github","github","github","github","github","core","github","core","github","title","body","github"]}